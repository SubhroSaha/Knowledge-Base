David Mahler
37.8K subscribers
Introduction to Git - Branching and Merging.
Twitter: @davidmahler
LinkedIn: https://www.linkedin.com/in/davidmahler​

Introduction to Git - Core Concepts (recommended prerequisite): https://youtu.be/uR6G2v_WsRA​

Reference:
https://git-scm.com/book/en/v2​

Commands Used:

git log =  git history

alias graph = git log --all --decorate --oneline --graph === create shortcut for showing commit history graph
git branch (branch-name) = create a branch
git checkout (branch-name) = checkout a branch/move head pointer
git checkout -b (branch-name) = create and checkout a branch/move head pointer
git commit -a -m "commit message" = commit all modified and tracked files in on command (bypass separate 'git add' command)
git diff master..SDN = diff between 2 branches
git merge (branch-name) = merge branches (fast-forward and 3-way merges)
git branch --merged = see branches merged into the current branch
git branch -d (branch-name) = delete a branch, only if already merged
git branch -D (branch-name) = delete a branch, including if not already merged (exercise caution here)
git merge --abort = abort a merge during a merge conflict situation
git checkout (commit-hash) = checkout a commit directly, not through a branch, results in a detached HEAD state
git stash = create a stash point
git stash list = list stash points
git stash list -p = list stash points and show diffs per stash
git stash apply = apply most recent stash
git stash pop = apply most recent stash, and remove it from saved stashes
git stash apply (stash reference) = apply a specific stash point
git stash save "(description)" = create a stash point, be more descriptive

Looking for git in: C:\Program Files\Git\cmd\git.exe
Using git 2.27.0.windows.1 from C:\Program Files\Git\cmd\git.exe
> git rev-parse --git-dir
Open repository: c:\xampp\htdocs\KB
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(upstream:track)%00%(objectname) refs/heads/express refs/remotes/express
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git check-ignore -v -z --stdin
> git config --get commit.template
> git check-ignore -v -z --stdin
> git show --textconv :Git/somemore.txt
> git ls-files --stage -- C:\xampp\htdocs\KB\Git\somemore.txt
> git cat-file -s e1b527f703705b2601eb5bb432ab4cb8dee723c3
