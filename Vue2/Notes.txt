The Vue.js Cheat Sheet

Directives
Directives are attributes identified by the v- prefix.

Directive	Description
v-text	    uses the property as the text value of the element
v-html	    uses the property as the text value of the element, interpreting HTML
v-if	    show an element only if the conditional is true
v-else	    shows an alternative element if the preceding v-if is false
v-else-if	adds an else if block for a v-if construct
v-show	    similar to v-if, but adds the element to the DOM even if falsy. Just sets it to display: none.
v-for	    iterates over an array or iterable object
v-on	    listen to DOM events
v-bind	    reactively update an HTML attribute
v-model	    sets up a two-way binding for form inputs. used in form elements, updates the model when the user changes the form field value
v-once	    applies the property just once, and never refreshes it even if the data passed changes
v-key       adds key to an element


v-bind and v-on have a shorthand format:

<a v-bind:href="url">...</a>
<a :href="url">...</a>
<a v-on:click="doSomething">...</a>
<a @click="doSomething">...</a>


Example of v-if / v-else / v-else-if:

<div v-if="type === 'A'">
  it's A
</div>
<div v-else-if="type === 'B'">
  it's B
</div>
<div v-else-if="type === 'C'">
  it's C
</div>
<div v-else>
  it's neither one
</div>






Event Modifiers
It is a very common need to call event.preventDefault() or event.stopPropagation() inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.

To address this problem, Vue provides event modifiers for v-on. Recall that modifiers are directive postfixes denoted by a dot.

.stop
.prevent
.capture
.self
.once
.passive
<!-- the click event's propagation will be stopped -->
<a v-on:click.stop="doThis"></a>

<!-- the submit event will no longer reload the page -->
<form v-on:submit.prevent="onSubmit"></form>

<!-- modifiers can be chained -->
<a v-on:click.stop.prevent="doThat"></a>

<!-- just the modifier -->
<form v-on:submit.prevent></form>

<!-- use capture mode when adding the event listener -->
<!-- i.e. an event targeting an inner element is handled here before being handled by that element -->
<div v-on:click.capture="doThis">...</div>

<!-- only trigger handler if event.target is the element itself -->
<!-- i.e. not from a child element -->
<div v-on:click.self="doThat">...</div>